grammar PasswordValidator;
password: (DIGIT | SYMBOL | UPPERCASE_LETTER | ~(' '))*;
DIGIT: [0-9];
SYMBOL: [!@#$%^&*()];
UPPERCASE_LETTER: [A-Z];
WS: [ \t\r\n]+ -> skip

تعریف می کند که اعتبارسنجی رمزهای عبور بر اساس passwordvalidatorدستور زبانی به نام 
معیارهای خاصی استفاده می شود


گرامر از چندین قانون تشکیل شده است:
1-password: این قانون ساختار رمز عبور را تعریف می کند. ترکیبی از ارقام، نمادها، حروف بزرگ و هر کاراکتری که فاصله یا
آپاستروف نیست را امکان پذیر می کند
2-digiit:این قانون یک رقم را به عنوان هر کاراکتری از 0تا9تعریف میکند
3-symbol:تعریف می کند[!@%$#^&*()]این قانون یک نماد را به عنوان هر کاراکتری از مجموعه
4-Uppercase-letter:تعریف می کندAتاZاین قانون یک حرف بزرگ را به عنوان هر کاراکتری از
5-ws:این قانون کاراکترهای فضای خالی (فضاها، برگه ها، برگردانده های حمل و خطوط جدید) را تعریف می کند و به 
تجزیه کننده دستور می دهد که آنها را رد کند

 هدف از این دستور زبان ارائه مجموعه ای از قوانین برای اعتبارسنجی رمزهای عبور بر اساس وجود اعداد، نمادها و حروف 
بزرگ است. با استفاده از این دستور زبان، می توانید اطمینان حاصل کنید که رمزهای عبور الزامات پیچیدگی خاصی را برآورده 
می کنند



java
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
public class PasswordValidatorMain {
 public static void main(String[] args) {
 String input = "Your password input here"; // Replace with the actual password input
 PasswordValidatorLexer lexer = new PasswordValidatorLexer(CharStreams.fromString(input));
 CommonTokenStream tokens = new CommonTokenStream(lexer);
 PasswordValidatorParser parser = new PasswordValidatorParser(tokens);
 ParseTree tree = parser.password();
 boolean isValid = tree.getText().equals(input);
 System.out.println(isValid);
 }
}

را برای تجزیه و اعتبارسنجی رمزهای عبور نشان می دهدANTLRاین کد یک برنامه جاوا است که استفاده از کتابخانه
:شروع می شودAntlr برنامه با وارد کردن کلاس های لازم از کتابخانه

org.antlr.v4.runtime.*` `
org.antlr.v4.runtime.tree.*`.`

است که نقطه ورود برنامه استmain نام دارد و حاوی متدpasswordvalidatormainکلاس اصلی 

وجود دارد که نمایانگر ورودی رمز عبور استinput>> در روش اصلی، یک متغیر رشته ای به نام
باید <<ورودی رمز عبور شما 
در اینجا>> را با ورودی واقعی رمز عبوری که میخواهید تأیید کنید جایگزین کنید
 
ایجاد می کند و رشته ورودی را به عنوان passwordvalidatorlexer>> >> سپس برنامه یک نمونه از
 پارامتر به سازنده خود می دهد

وظیفه توکن کردن رشته ورودی را به عهده داردlexerاین

 ایجاد می شود و lexer با استفاده از نشانه هایcommontokenstream یک

این جریان نشان دهنده دنباله ای از توکن ها است که می تواند توسط تجزیه کننده مصرف شود

ایجاد میشود که جریان نشانه را به عنوان پارامتر در نظر میگیردpasswordvalidatorparser نمونه ای از

این تجزیه کننده وظیفه تجزیه جریان توکن و تولید درخت تجزیه را بر عهده دارد

آماده کرده و گذرواژه در تجزیه کننده فراخوانی می کند که با نقطه شروع دستورg4 سپس برنامه فایل

 زبان مطابقت دارد این قانون یک درخت تجزیه را نشان می دهد که ساختار ورودی تجزیه شده را نشان می دهد

در درخت تجزیه فراخوانی می شود تا نمایش متن ورودی تجزیه شده را بازیابی کندtree.gettext() متد

در نهایت، برنامه متن ورودی تجزیه شده را با رشته ورودی اصلی مقایسه می کند تا مشخص کند رمز عبور معتبر است یا
خیر 
System.out.printIn(isvalid) ذخیره میشود و با استفاده ازisValidنتیجه در یک متغیر بولی به نام
در کنسول چاپ می شود

را برای تجزیه و اعتبارسنجی رمزهای عبور در جاوا نشان می دهدAntlrبه طور کلی، این کد نحوه استفاده از




